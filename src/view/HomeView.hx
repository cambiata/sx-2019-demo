package view;

import data.KorakademinScorxItems;
import js.Browser;
import data.Model;
import data.AppStore;
import view.*;

class HomeView extends AppBaseView {
	// /**
	//  * Första vattendelare för hemsidan
	//  * Ifall userId är null, visa hemsidan för gäst
	//  * Ifall userId är satt, visa hemsidan för inloggad användare
	//  */
	public function view() {
		return this.store.state.userId == null ? this.guestView() : cast this.userView();
	}

	//-------------------------------------------------------------------------------------

	/**
	 * Returnera vy för gäst
	 */
	public function guestView() {
		return [
			buildCells([
				Image('assets/img/old-town.jpg'),
				Title('Sjung och spela var du vill'),
				Info('ScorX spelare funkar både för mobil och surfplatta!'),
			]),
			buildCells([
				Infoblobs([
					Infoblob.Standard('Har du prövat?', 'Klicka här för att...'),
					Infoblob.Standard('Titta här!', 'Skulle inte du också vilja åka till...'),
					Infoblob.Standard('Vill du veta mer?', 'Undrar du över något? klicka här!')
				]),
				Image('assets/img/happy.jpg'),
				Title('Pröva ScorX gratis!'),
				Info('Klicka på valfri titel i listan nedan, lyssna och sjung med!'),
				SonglistHeader('Gratis låtar', null),
				Songlist('Gratislåtar', KorakademinScorxItems.items(), [LicenseHolder('Upphovsrättsfri')]),
			]),
		];
	}

	//-------------------------------------------------------------------------------------

	/**
	 * Returnera vyer för inloggad användare
	 */
	function userView() {
		return [choirAdminView(), choirMemberView(), mySongsView()];
	}

	function choirMemberView() {
		var user:User = this.store.getUser();

		var groups:Array<Group> = this.store.state.groups.filter(group -> group.members.indexOf(user.username) > -1);

		// filtrera bort så att inte ledarna ser denna vy,
		// de ser ju samma grupp i choirAdminsView()
		groups = groups.filter(group -> {
			!(group.admins.indexOf(user.username) > -1);
		});

		var groupLists = groups.map(group -> buildCells([
			SonglistHeader(group.name, null),
			Songlist(group.name, KorakademinScorxItems.items(), [SelectProductIds(group.songs)]),
		]));

		var choirsInfo = groupLists
			.length > 0 ? 'Här visas de låtar som delats ut till dig av dina körer.' : 'Du verkar inte vara deltagare i någon kör eller grupp i ScorX.';

		return [
			buildCells([
				Infoblobs([
					Infoblob.Standard('Hej Körsångare', 'Klicka här för att...'),
					Infoblob.Standard('1000 låtar gratis!', 'Körakademin Plus är stället för dej!'),
					Infoblob.Standard('Vad betyder "con tenerezza"?', 'Undrar du över något? klicka här!')
				]),

			]),
			buildCells([Title('Körernas låtar'), Info(choirsInfo),]),

			groupLists,
			groupLists.length == 0 ? buildCells([SearchChoir]) : null,

			// new UserInvitationsView(this.store).view(),
		];
	}

	function choirAdminView() {
		var user:User = this.store.getUser();

		var groups:Array<Group> = this.store.state.groups.filter(group -> group.admins.indexOf(user.username) > -1);
		if (groups == null || groups.length == 0)
			return null;

		var groupLists = groups.map(group -> buildCells([
			SonglistHeader(group.name, 'Info...'),
			Songlist(group.name, KorakademinScorxItems.items(), [SelectProductIds(group.songs)]),
			ListGroupMembers(group.name),
			InviteGroupMembers(group.name),

		]));

		return [
			buildCells([Title('Du leder följande körer'),]),
			groupLists,
			buildCells([AutogeneratedKorakademinLeaderSonglist]),
		];
	}

	function mySongsView() {
		var user:User = this.store.getUser();
		// var mySongs:Array<Song> = user.songs.map(title -> this.store.getSong(title));
		// var myList = buildCells([Songlist('Mina låtar', KorakademinScorxItems.items(), [LimitNumber(5)])]) : buildCells([BuySongs]);

		return [
			buildCells([
				Title('Mina låtar'),
				Info('Här visas de låtar som du har köpt eller valt genom förmånserbjudanden.'),
				SonglistHeader('Mina låtar', null),
				Songlist('Mina låtar', KorakademinScorxItems.items(), [SelectProductIds(user.songs)]),
				BuySongs,
			]),
		];
	}

	//-------------------------------------------------------------------------------------
	// Hjälpfunktioner för att skapa element på sidan

	function buildCells(cells:Array<HomeCell>) {
		function onSongClick(song:ScorxItem) {
			// Browser.alert(song);
			this.store.update(this.store.state.playerSong = song);
		}

		return m('section', cells.map(cell -> {
			return switch cell {
				case Image(url): m('img', {src: url});

				case Title(title): m('h1.center-narrow.vspace', title);

				case Info(info): m('h3.center-narrow.vspace', info);

				case SonglistHeader(title, info):
					m('div.centerpad', [m('h2', title), info != null ? m('p', info) : null]);

				case Songlist(title, songs, filter):
					m('div.centerpad', new SongListView(this.store, title, songs, filter, onSongClick).view());

				case SearchChoir:
					// skapa lista för eventuella gruppansökningar för inloggad användare
					// cast [new UserApplicationsView(this.store).view(),];
					new SearchGroupView(this.store,
						'Skriv körens namn i listan för att hitta din kör. Klicka därefter på körens namn för att ansluta dig till gruppen.', group -> {
						this.store.addGroupMember(this.store.state.userId, group.name);
						// group.admins.map(admin->this.store.sendEmailMessage({to:admin.username, from:'admin@scorx.org', })
						this.store.sendEmailMessage({to: this.store.state.userId, from: 'admin@scorx.org', type: EmailType.UserGroupjoinInfo(group.name)});
						group.admins.map(admin -> {
							this.store.sendEmailMessage({
								to: admin,
								from: 'admin@scorx.org',
								type: EmailType.AdminGroupjoinInfo(this.store.state.userId, group.name)
							});
						});
					}).view();

				case BuySongs: m('div.center', [m('button.center', {
						onclick: e -> {
							trace('Click');
						}
					}, 'Gå till butiken'),]);

				case ListGroupMembers(groupname):
					var group:Group = this.store.getGroup(groupname);
					m('div.centerpad', [
						this.detailsSummary('Gruppens medlemmar', [m('ul', group.members.map(member -> m('li', member)))])

					]);

				case InviteGroupMembers(groupname):
					var group:Group = this.store.getGroup(groupname);
					m('div.centerpad', [

						this.detailsSummary('Bjud in medlemmar', new LeaderInviteUsers(this.store, group).view())
					]);

				case Infoblobs(blobs):
					m('div.infoblobs-wide', m('div.infoblobs.centerdiv', blobs.map(blob -> {
						return switch blob {
							case Infoblob.Standard(title, info): m('div.infoblob',
									m('div.infoblob-content', [m('div.infoblob-title', title), m('div.infoblob-info', info)]));
						}
					})));

				case AutogeneratedKorakademinLeaderSonglist:
					var user:User = this.store.getUser();
					var groups:Array<Group> = this.store.getLeaderGroups(user.username);
					var sensusGroups:Array<Group> = groups.filter(group -> this.store.groupIsSensusGroup(group));
					var showThisList = sensusGroups.length > 0;

					if (!showThisList) return m('p.centerpad',
						'(Denna körledare ser INTE Sensus Körledarlista - beroende på att hen leder inte någon grupp där samtliga admins har sensus:SensusUser satt.)');

					m('div.centerpad', [
						m('h2', 'Körakademins kompletta låtlista'),
						m('p',
							'Du kan se denna lista därför du leder någon kör som är kopplad till Sensus körverksamhet (dvs samtliga ledare i någon av grupperna har sensus:SensusUser satt.)'),
						m('p', 'Du kan se och spela samtliga låtar i listan.'),
						sensusGroups.map(group -> m('p', group.name)),
					]);
			}
		}));
	}
}
